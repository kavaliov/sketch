{"version":3,"sources":["components/right-control-panel/components/drawing/Drawing.module.css","components/panel/assets/close.svg","components/panel/Panel.tsx","components/button/Button.tsx","duck/context.ts","duck/actions.ts","duck/constants.ts","duck/operations.ts","components/color-picker-panel/ColorPickerPanel.tsx","components/right-control-panel/components/drawing/duck/constants.ts","components/right-control-panel/components/drawing/assets/brush1.svg","components/right-control-panel/components/drawing/assets/brush2.svg","components/right-control-panel/components/drawing/assets/brush3.svg","components/right-control-panel/components/drawing/assets/brush4.svg","components/right-control-panel/components/drawing/assets/brush5.svg","components/right-control-panel/components/drawing/assets/highlight.svg","components/right-control-panel/components/drawing/duck/operations.ts","duck/utils.ts","components/right-control-panel/components/drawing/Drawing.tsx","components/right-control-panel/RightControlPanel.tsx","duck/state.ts","duck/reducer.ts","Sketch.tsx","index.tsx","components/panel/Panel.module.css","components/color-picker-panel/ColorPicker.module.css","components/button/Button.module.css","components/right-control-panel/RightControlPanel.module.css","Sketch.module.css"],"names":["module","exports","Panel","opened","onClose","title","children","className","classNames","styles","wrapper","header","onClick","close","src","closeIcon","alt","Button","AppContext","React","setCurrentColor","createAction","setMode","setBrush","FABRIC_SETTINGS","CANVAS_SETTINGS","height","width","backgroundColor","removeSelectedObject","canvas","selectedObject","getActiveObject","type","forEachObject","element","remove","discardActiveObject","requestRenderAll","changeObjectColor","object","color","set","stroke","hex","fill","ColorPickerPanel","useContext","dispatch","currentColor","state","pickerWrapper","picker","onChange","activeObject","renderAll","changeActiveObjectColor","TOOLS","icon","changeCanvasBrush","brush","brushSize","freeDrawingBrush","fabric","PencilBrush","opacity","tempHex","replace","r","parseInt","substring","g","b","addOpacity","shadow","Shadow","blur","affectStroke","BRUSH_SIZE","Drawing","useState","setOpened","setBrushSize","mode","useEffect","isDrawingMode","highlight","panel","map","size","sizeHandler","brushes","tool","brushType","active","RightControlPanel","appState","appReducer","createReducer","initialState","handleAction","actions","payload","Sketch","useReducer","canvasIdRef","useRef","length","result","characters","i","charAt","Math","floor","random","getId","sketchRef","init","setInit","current","Canvas","Object","prototype","cornerStyle","cornerSize","selectionColor","selectionBorderColor","selectionLineWidth","document","addEventListener","event","key","id","Provider","value","ReactDOM","render","StrictMode","getElementById"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,UAAY,2BAA2B,QAAU,yBAAyB,MAAQ,uBAAuB,OAAS,wBAAwB,OAAS,0B,qHCDrL,MAA0B,kC,wBC0B1BC,EAdoB,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC5D,OACE,sBAAKC,UAAWC,IAAWC,IAAOC,QAAR,eAAoBD,IAAON,OAASA,IAA9D,UACE,sBAAKI,UAAWE,IAAOE,OAAvB,UACGN,EACD,cAAC,EAAD,CAAQO,QAASR,EAASG,UAAWE,IAAOI,MAA5C,SACE,qBAAKC,IAAKC,EAAWC,IAAI,UAG5BV,M,iBCNQW,EANsB,SAAC,GAAD,IAAGX,EAAH,EAAGA,SAAUM,EAAb,EAAaA,QAASL,EAAtB,EAAsBA,UAAtB,OACnC,wBAAQK,QAASA,EAASL,UAAWC,IAAWC,IAAOC,QAASH,GAAhE,SACGD,K,QCRQY,EAAaC,gBAAoC,M,QCAjDC,EAAkBC,uBAAa,2BAAbA,GAIlBC,EAAUD,uBAAa,kBAAbA,GAIVE,EAAWF,uBAAa,mBAAbA,GCXXG,EAIE,EAJFA,EAKG,SALHA,EAMM,2BANNA,EAOa,UAPbA,EAQW,EAGXC,EAAkB,CAC7BC,OAXe,IAYfC,MAXc,IAYdC,gBAXmB,QCqBfC,EAAuB,SAACC,GAC5B,IAAMC,EAAiBD,EAAOE,kBAE1BD,GAA0C,oBAAxBA,EAAeE,KAClCF,EAAuBG,eAAc,SAACC,GACrCL,EAAOM,OAAOD,MAGhBL,EAAOM,OAAOL,GAGhBD,EAAOO,sBAAsBC,oBAsBzBC,EAAoB,SAACC,EAAaC,GAClB,SAAhBD,EAAOP,MACTO,EAAOE,IAAI,CAAEC,OAAQF,EAAMG,MAGT,SAAhBJ,EAAOP,MAAmC,WAAhBO,EAAOP,MACnCO,EAAOE,IAAI,CAAEG,KAAMJ,EAAMG,O,iBCpCdE,EApBoB,WACjC,MAAoC3B,IAAM4B,WAAW7B,GAA7CY,EAAR,EAAQA,OAAQkB,EAAhB,EAAgBA,SACRC,EADR,EAA0BC,MAClBD,aAOR,OACE,qBAAK1C,UAAWE,IAAO0C,cAAvB,SACE,cAAC,IAAD,CACE5C,UAAWE,IAAO2C,OAClBX,MAAOQ,EACPI,SAVgB,SAACZ,GACrBO,EAAS5B,EAAgB,CAAE6B,aAAcR,EAAMG,OD0BZ,SACrCd,EACAW,GAEA,IAAMa,EAAexB,EAAOE,kBAExBsB,IACwB,oBAAtBA,EAAarB,KACdqB,EAAqBpB,eAAc,SAACC,GACnCI,EAAkBJ,EAASM,MAG7BF,EAAkBe,EAAcb,GAGlCX,EAAOyB,aCxCPC,CAAwB1B,EAAQW,SCPvBgB,EAAQ,CACnB,CACExB,KAAM,SACNyB,KCTW,IAA0B,oCDWvC,CACEzB,KAAM,SACNyB,KEbW,IAA0B,oCFevC,CACEzB,KAAM,QACNyB,KGjBW,IAA0B,oCHmBvC,CACEzB,KAAM,SACNyB,KIrBW,IAA0B,oCJuBvC,CACEzB,KAAM,MACNyB,KKzBW,IAA0B,qCCA1B,MAA0B,sC,iBCI5BC,EAAoB,SAC/B7B,EACA8B,EACAC,EACApB,GAEc,WAAVmB,GAAgC,UAAVA,GAA+B,WAAVA,IAE7C9B,EAAOgC,iBAAmB,IAAIC,SAAOC,YAAYlC,IAGnDA,EAAOgC,iBAAiBrB,MAAQA,EAChCX,EAAOgC,iBAAiBnC,MAAQkC,EAElB,WAAVD,IACF9B,EAAOgC,iBAAiBrB,MCTF,SAACG,EAAaqB,GACtC,IAAMC,EAAUtB,EAAIuB,QAAQ,IAAK,IAC3BC,EAAIC,SAASH,EAAQI,UAAU,EAAG,GAAI,IACtCC,EAAIF,SAASH,EAAQI,UAAU,EAAG,GAAI,IACtCE,EAAIH,SAASH,EAAQI,UAAU,EAAG,GAAI,IAE5C,MAAM,QAAN,OAAeF,EAAf,YAAoBG,EAApB,YAAyBC,EAAzB,YAA8BP,EAAU,IAAxC,KDGkCQ,CAAWhC,EAAO,KAGtC,UAAVmB,IACF9B,EAAOgC,iBAAiBrB,MAAQ,OAEhCX,EAAOgC,iBAAiBY,OAAS,IAAIX,SAAOY,OAAO,CACjDC,KAAM,GACNC,cAAc,EACdpC,YEjBAqC,EAAa,CAAC,GAAI,GAAI,GAAI,GAAI,IA4DrBC,EA1DW,WACxB,MAA4B5D,IAAM6D,UAAS,GAA3C,mBAAO7E,EAAP,KAAe8E,EAAf,KACA,EAA0B9D,IAAM6D,SAAoB,IAApD,mBAAOpB,EAAP,KAAcrC,EAAd,KACA,EAAkCJ,IAAM6D,SAAiB,IAAzD,mBAAOnB,EAAP,KAAkBqB,EAAlB,KACA,EAAoC/D,IAAM4B,WAAW7B,GAA7CgC,EAAR,EAAQA,MAAOpB,EAAf,EAAeA,OAAQkB,EAAvB,EAAuBA,SACfC,EAAuBC,EAAvBD,aAAckC,EAASjC,EAATiC,KAEtBhE,IAAMiE,WAAU,WACdtD,EAAOuD,cAAyB,YAATF,IACtB,CAACA,IAEJhE,IAAMiE,WAAU,WACdzB,EAAkB7B,EAAQ8B,EAAOC,EAAWZ,KAC3C,CAACW,EAAO9B,EAAQ+B,EAAWZ,IAY9B,OACE,qCACE,cAAC,EAAD,CAAQrC,QAAS,kBAAMqE,GAAU,IAAjC,SACE,qBAAKnE,IAAKwE,EAAWtE,IAAI,OAE3B,cAAC,EAAD,CAAOb,OAAQA,EAAQC,QAAS,kBAAM6E,GAAU,IAAhD,SACE,sBAAK1E,UAAWE,IAAO8E,MAAvB,UACE,qBAAKhF,UAAWE,IAAOoD,UAAvB,SACGiB,EAAWU,KAAI,SAACC,GAAD,OACd,cAAC,EAAD,CAAmB7E,QAAS,kBAbpB,SAAC6E,GACnBP,EAAaO,GAY+BC,CAAYD,IAA9C,SACGA,GADUA,QAKjB,qBAAKlF,UAAWE,IAAOkF,QAAvB,SACGlC,EAAM+B,KAAI,SAACI,GAAD,OACT,wBACEhF,QAAS,kBA3BDiF,EA2BoBD,EAAK3D,KA1B7Ce,EAAS1B,EAAQ,CAAE6D,KAAM,aACzB5D,EAASsE,QACTZ,GAAU,GAHS,IAACY,GA6BRtF,UAAWC,IAAWC,IAAOmD,MAAR,eAClBnD,IAAOqF,OAASlC,IAAUgC,EAAK3D,OAJpC,SAOE,qBAAKnB,IAAK8E,EAAKlC,KAAM1C,IAAI,MALpB4E,EAAK3D,oB,iBC5CX8D,EARqB,WAClC,OACE,qBAAKxF,UAAWE,IAAOC,QAAvB,SACE,cAAC,EAAD,O,QCCSsF,EANS,CACtB/C,aAAc,UACdkC,KAAM,OACNU,UAAW,UCmBEI,EAjBIC,wBAAmCC,GACnDC,aACCC,GACA,SAACnD,EAAD,OAAqBD,EAArB,EAAUqD,QAAWrD,aAArB,mBAAC,eACIC,GADL,IAEED,oBAGHmD,aAAaC,GAAkB,SAACnD,EAAD,OAAqB2C,EAArB,EAAUS,QAAWT,UAArB,mBAAC,eAC5B3C,GAD2B,IAE9B2C,iBAEDO,aAAaC,GAAiB,SAACnD,EAAD,OAAqBiC,EAArB,EAAUmB,QAAWnB,KAArB,mBAAC,eAC3BjC,GAD0B,IAE7BiC,Y,iBCsBWoB,EAhCU,WACvB,MAA0BpF,IAAMqF,WAAWP,EAAYD,GAAvD,mBAAO9C,EAAP,KAAcF,EAAd,KACMyD,EAActF,IAAMuF,OLbP,WAInB,IAJ6C,IAAzBC,EAAwB,uDAAf,GACzBC,EAAS,GACPC,EACJ,iEACOC,EAAI,EAAGA,EAAIH,EAAQG,IAC1BF,GAAUC,EAAWE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAAWF,SAEpE,OAAOC,EKMkCO,IACnCC,EAAYjG,IAAMuF,OAAY,MACpC,EAAwBvF,IAAM6D,UAAS,GAAvC,mBAAOqC,EAAP,KAAaC,EAAb,KAaA,OAXAnG,IAAMiE,WAAU,Wfbe,IAC/BtD,EeaM2E,EAAYc,UACdH,EAAUG,QAAU,IAAIxD,SAAOyD,OAC7Bf,EAAYc,QACZ9F,IfhBNK,EekBsBsF,EAAUG,Wfb9BxD,SAAO0D,OAAOC,UAAUC,YAAcnG,EACtCuC,SAAO0D,OAAOC,UAAUE,WAAapG,EACrCM,EAAO+F,eAAiBrG,EACxBM,EAAOgG,qBAAuBtG,EAC9BM,EAAOiG,mBAAqBvG,EAE5BwG,SAASC,iBAAiB,WAAW,SAACC,GAClB,cAAdA,EAAMC,KACRtG,EAAqBC,OeMvBwF,GAAQ,MAET,IAGD,sBAAK/G,UAAWE,IAAOC,QAAvB,UACE,wBAAQ0H,GAAI3B,EAAYc,UACvBF,GACC,eAACnG,EAAWmH,SAAZ,CACEC,MAAO,CAAExG,OAAQsF,EAAUG,QAASvE,WAAUE,SADhD,UAGE,cAAC,EAAD,IACA,cAAC,EAAD,WChCVqF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFT,SAASU,eAAe,U,mBCP1B1I,EAAOC,QAAU,CAAC,QAAU,uBAAuB,OAAS,sBAAsB,MAAQ,qBAAqB,OAAS,wB,mBCAxHD,EAAOC,QAAU,CAAC,cAAgB,mCAAmC,OAAS,8B,mBCA9ED,EAAOC,QAAU,CAAC,QAAU,0B,mBCA5BD,EAAOC,QAAU,CAAC,QAAU,qC,mBCA5BD,EAAOC,QAAU,CAAC,QAAU,0B","file":"static/js/main.455598bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"Drawing_panel__2YMND\",\"brushSize\":\"Drawing_brushSize__KfiI2\",\"brushes\":\"Drawing_brushes__3-VLc\",\"brush\":\"Drawing_brush__3ydnR\",\"active\":\"Drawing_active__2CsHw\",\"leaves\":\"Drawing_leaves__2eNQa\"};","export default __webpack_public_path__ + \"static/media/close.ae19aa75.svg\";","import React from \"react\";\nimport { Button } from \"../index\";\nimport classNames from \"classnames\";\nimport closeIcon from \"./assets/close.svg\";\nimport styles from \"./Panel.module.css\";\n\ninterface PanelType {\n  opened: boolean;\n  title?: string;\n  onClose: () => any;\n}\n\nconst Panel: React.FC<PanelType> = ({ opened, onClose, title, children }) => {\n  return (\n    <div className={classNames(styles.wrapper, { [styles.opened]: opened })}>\n      <div className={styles.header}>\n        {title}\n        <Button onClick={onClose} className={styles.close}>\n          <img src={closeIcon} alt=\"\" />\n        </Button>\n      </div>\n      {children}\n    </div>\n  );\n};\n\nexport default Panel;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./Button.module.css\";\n\ninterface ButtonType {\n  onClick?: () => any;\n  className?: string;\n}\n\nconst Button: React.FC<ButtonType> = ({ children, onClick, className }) => (\n  <button onClick={onClick} className={classNames(styles.wrapper, className)}>\n    {children}\n  </button>\n);\n\nexport default Button;\n","import * as React from \"react\";\nimport { AppContext as AppContextType } from \"./types\";\n\nexport const AppContext = React.createContext<AppContextType>(null as any);","import { createAction } from \"typesafe-actions\";\nimport { Mode, BrushType } from \"./types\";\n\nexport const setCurrentColor = createAction(\"SKETCH/SET_CURRENT_COLOR\")<{\n  currentColor: string;\n}>();\n\nexport const setMode = createAction(\"SKETCH/SET_MODE\")<{\n  mode: Mode;\n}>();\n\nexport const setBrush = createAction(\"SKETCH/SET_BRUSH\")<{\n  brushType: BrushType;\n}>();\n","export const FABRIC_SETTINGS = {\n  CANVAS_HEIGHT: 518,\n  CANVAS_WIDTH: 970,\n  CANVAS_BACKGROUND: \"#fff\",\n  CORNER_SIZE: 6,\n  CORNER_STYLE: \"circle\",\n  SELECTION_COLOR: \"rgba(232, 248, 255, 0.1)\",\n  SELECTION_BORDER_COLOR: \"#cef0fe\",\n  SELECTION_LINE_WIDTH: 1,\n};\n\nexport const CANVAS_SETTINGS = {\n  height: FABRIC_SETTINGS.CANVAS_HEIGHT,\n  width: FABRIC_SETTINGS.CANVAS_WIDTH,\n  backgroundColor: FABRIC_SETTINGS.CANVAS_BACKGROUND,\n};\n","import { fabric } from \"fabric\";\nimport { FABRIC_SETTINGS } from \"./constants\";\nimport { ColorResult } from \"react-color\";\n\nexport const setSketchSettings = (\n  canvas: fabric.Canvas | undefined\n): void => {\n  if (canvas) {\n    // Initial canvas setup\n    // @ts-ignore\n    fabric.Object.prototype.cornerStyle = FABRIC_SETTINGS.CORNER_STYLE;\n    fabric.Object.prototype.cornerSize = FABRIC_SETTINGS.CORNER_SIZE;\n    canvas.selectionColor = FABRIC_SETTINGS.SELECTION_COLOR;\n    canvas.selectionBorderColor = FABRIC_SETTINGS.SELECTION_BORDER_COLOR;\n    canvas.selectionLineWidth = FABRIC_SETTINGS.SELECTION_LINE_WIDTH;\n\n    document.addEventListener(\"keydown\", (event) => {\n      if (event.key === \"Backspace\") {\n        removeSelectedObject(canvas);\n      }\n    });\n  }\n};\n\nconst removeSelectedObject = (canvas: fabric.Canvas) => {\n  const selectedObject = canvas.getActiveObject();\n\n  if (selectedObject && selectedObject.type === \"activeSelection\") {\n    (selectedObject as any).forEachObject((element: any) => {\n      canvas.remove(element);\n    });\n  } else {\n    canvas.remove(selectedObject);\n  }\n\n  canvas.discardActiveObject().requestRenderAll();\n};\n\nexport const changeActiveObjectColor = (\n  canvas: fabric.Canvas,\n  color: ColorResult\n) => {\n  const activeObject = canvas.getActiveObject();\n\n  if (activeObject) {\n    if (activeObject.type === \"activeSelection\") {\n      (activeObject as any).forEachObject((element: any) => {\n        changeObjectColor(element, color);\n      });\n    } else {\n      changeObjectColor(activeObject, color);\n    }\n\n    canvas.renderAll();\n  }\n};\n\nconst changeObjectColor = (object: any, color: ColorResult) => {\n  if (object.type === \"path\") {\n    object.set({ stroke: color.hex });\n  }\n\n  if (object.type === \"rect\" || object.type === \"circle\") {\n    object.set({ fill: color.hex });\n  }\n};\n","import React from \"react\";\nimport { ColorResult, HuePicker } from \"react-color\";\nimport { AppContext } from \"../../duck/context\";\nimport { setCurrentColor } from \"../../duck/actions\";\nimport { changeActiveObjectColor } from \"duck/operations\";\nimport styles from \"./ColorPicker.module.css\";\n\nconst ColorPickerPanel: React.FC = () => {\n  const { canvas, dispatch, state } = React.useContext(AppContext);\n  const { currentColor } = state;\n\n  const changeHandler = (color: ColorResult) => {\n    dispatch(setCurrentColor({ currentColor: color.hex }));\n    changeActiveObjectColor(canvas, color);\n  };\n\n  return (\n    <div className={styles.pickerWrapper}>\n      <HuePicker\n        className={styles.picker}\n        color={currentColor}\n        onChange={changeHandler}\n      />\n    </div>\n  );\n};\n\nexport default ColorPickerPanel;\n","import eraser from \"../assets/brush1.svg\";\nimport marker from \"../assets/brush2.svg\";\nimport magic from \"../assets/brush3.svg\";\nimport pencil from \"../assets/brush4.svg\";\nimport pen from \"../assets/brush5.svg\";\n\nexport const TOOLS = [\n  {\n    type: \"eraser\",\n    icon: eraser,\n  },\n  {\n    type: \"marker\",\n    icon: marker,\n  },\n  {\n    type: \"magic\",\n    icon: magic,\n  },\n  {\n    type: \"pencil\",\n    icon: pencil,\n  },\n  {\n    type: \"pen\",\n    icon: pen,\n  },\n];\n","export default __webpack_public_path__ + \"static/media/brush1.4bb3634c.svg\";","export default __webpack_public_path__ + \"static/media/brush2.bd74d5cf.svg\";","export default __webpack_public_path__ + \"static/media/brush3.38a28f48.svg\";","export default __webpack_public_path__ + \"static/media/brush4.4c238ed7.svg\";","export default __webpack_public_path__ + \"static/media/brush5.b0040eae.svg\";","export default __webpack_public_path__ + \"static/media/highlight.a5e0d7ce.svg\";","import { fabric } from \"fabric\";\nimport { BrushType } from \"../../../../../duck/types\";\nimport { addOpacity } from \"../../../../../duck/utils\";\n\nexport const changeCanvasBrush = (\n  canvas: fabric.Canvas,\n  brush: BrushType,\n  brushSize: number,\n  color: string\n) => {\n  if (brush === \"marker\" || brush === \"magic\" || brush === \"pencil\") {\n    // @ts-ignore\n    canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);\n  }\n\n  canvas.freeDrawingBrush.color = color;\n  canvas.freeDrawingBrush.width = brushSize;\n\n  if (brush === \"marker\") {\n    canvas.freeDrawingBrush.color = addOpacity(color, 20);\n  }\n\n  if (brush === \"magic\") {\n    canvas.freeDrawingBrush.color = \"#fff\";\n    // @ts-ignore\n    canvas.freeDrawingBrush.shadow = new fabric.Shadow({\n      blur: 30,\n      affectStroke: true,\n      color,\n    });\n  }\n};\n","export const getId = (length = 10): string => {\n  let result = \"\";\n  const characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return result;\n};\n\nexport const addOpacity = (hex: string, opacity: number) => {\n  const tempHex = hex.replace(\"#\", \"\");\n  const r = parseInt(tempHex.substring(0, 2), 16);\n  const g = parseInt(tempHex.substring(2, 4), 16);\n  const b = parseInt(tempHex.substring(4, 6), 16);\n\n  return `rgba(${r},${g},${b},${opacity / 100})`;\n};\n","import React from \"react\";\nimport { AppContext } from \"../../../../duck/context\";\nimport { setMode } from \"../../../../duck/actions\";\nimport { BrushType } from \"../../../../duck/types\";\nimport { Panel, Button } from \"../../../index\";\nimport { TOOLS } from \"./duck/constants\";\nimport highlight from \"./assets/highlight.svg\";\nimport styles from \"./Drawing.module.css\";\nimport classNames from \"classnames\";\nimport { changeCanvasBrush } from \"./duck/operations\";\n\nconst BRUSH_SIZE = [10, 20, 30, 40, 50];\n\nconst Drawing: React.FC = () => {\n  const [opened, setOpened] = React.useState(false);\n  const [brush, setBrush] = React.useState<BrushType>(\"\");\n  const [brushSize, setBrushSize] = React.useState<number>(10);\n  const { state, canvas, dispatch } = React.useContext(AppContext);\n  const { currentColor, mode } = state;\n\n  React.useEffect(() => {\n    canvas.isDrawingMode = mode === \"drawing\";\n  }, [mode]);\n\n  React.useEffect(() => {\n    changeCanvasBrush(canvas, brush, brushSize, currentColor);\n  }, [brush, canvas, brushSize, currentColor]);\n\n  const brushHandler = (brushType: BrushType): void => {\n    dispatch(setMode({ mode: \"drawing\" }));\n    setBrush(brushType);\n    setOpened(false);\n  };\n\n  const sizeHandler = (size: number): void => {\n    setBrushSize(size);\n  };\n\n  return (\n    <>\n      <Button onClick={() => setOpened(true)}>\n        <img src={highlight} alt=\"\" />\n      </Button>\n      <Panel opened={opened} onClose={() => setOpened(false)}>\n        <div className={styles.panel}>\n          <div className={styles.brushSize}>\n            {BRUSH_SIZE.map((size: number) => (\n              <Button key={size} onClick={() => sizeHandler(size)}>\n                {size}\n              </Button>\n            ))}\n          </div>\n          <div className={styles.brushes}>\n            {TOOLS.map((tool: any) => (\n              <button\n                onClick={() => brushHandler(tool.type)}\n                key={tool.type}\n                className={classNames(styles.brush, {\n                  [styles.active]: brush === tool.type,\n                })}\n              >\n                <img src={tool.icon} alt=\"\" />\n              </button>\n            ))}\n          </div>\n        </div>\n      </Panel>\n    </>\n  );\n};\n\nexport default Drawing;\n","import React from \"react\";\nimport { Drawing } from \"./components\";\nimport styles from \"./RightControlPanel.module.css\";\n\nconst RightControlPanel: React.FC = () => {\n  return (\n    <div className={styles.wrapper}>\n      <Drawing />\n    </div>\n  );\n};\n\nexport default RightControlPanel;\n","import { State } from \"./types\";\n\nconst appState: State = {\n  currentColor: \"#ff0000\",\n  mode: \"hand\",\n  brushType: \"pencil\",\n};\n\nexport default appState;\n","import { createReducer, ActionType } from \"typesafe-actions\";\nimport initialState from \"./state\";\nimport * as actions from \"./actions\";\nimport * as Types from \"./types\";\n\ntype Action = ActionType<typeof actions>;\n\nconst appReducer = createReducer<Types.State, Action>(initialState)\n  .handleAction(\n    actions.setCurrentColor,\n    (state, { payload: { currentColor } }) => ({\n      ...state,\n      currentColor,\n    })\n  )\n  .handleAction(actions.setBrush, (state, { payload: { brushType } }) => ({\n    ...state,\n    brushType,\n  }))\n  .handleAction(actions.setMode, (state, { payload: { mode } }) => ({\n    ...state,\n    mode,\n  }));\n\nexport default appReducer;\n","import React from \"react\";\nimport { fabric } from \"fabric\";\nimport {ColorPickerPanel, RightControlPanel} from \"./components\";\nimport { getId } from \"duck/utils\";\nimport { AppContext } from \"duck/context\";\nimport appReducer from \"duck/reducer\";\nimport appState from \"duck/state\";\nimport { CANVAS_SETTINGS } from \"./duck/constants\";\nimport { setSketchSettings } from \"./duck/operations\";\nimport styles from \"./Sketch.module.css\";\n\nconst Sketch: React.FC = () => {\n  const [state, dispatch] = React.useReducer(appReducer, appState);\n  const canvasIdRef = React.useRef<string>(getId());\n  const sketchRef = React.useRef<any>(null);\n  const [init, setInit] = React.useState(false);\n\n  React.useEffect(() => {\n    if (canvasIdRef.current) {\n      sketchRef.current = new fabric.Canvas(\n        canvasIdRef.current,\n        CANVAS_SETTINGS\n      );\n      setSketchSettings(sketchRef.current);\n      setInit(true);\n    }\n  }, []);\n\n  return (\n    <div className={styles.wrapper}>\n      <canvas id={canvasIdRef.current} />\n      {init && (\n        <AppContext.Provider\n          value={{ canvas: sketchRef.current, dispatch, state }}\n        >\n          <ColorPickerPanel />\n          <RightControlPanel />\n        </AppContext.Provider>\n      )}\n    </div>\n  );\n};\n\nexport default Sketch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Sketch from './Sketch';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Sketch />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Panel_wrapper__o97Tj\",\"header\":\"Panel_header__1ho3T\",\"close\":\"Panel_close__3SCzl\",\"opened\":\"Panel_opened__1xDq5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pickerWrapper\":\"ColorPicker_pickerWrapper__FIb-p\",\"picker\":\"ColorPicker_picker__-UzkV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Button_wrapper__1oiSI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"RightControlPanel_wrapper__3bH1D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Sketch_wrapper__2qscz\"};"],"sourceRoot":""}